<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>
<tagfile>
  <compound kind="file">
    <name>BisectionRootFinder.C</name>
    <path>/home/tiam/OpenFOAM/tiam-3.0.1/applications/libWallModelledLES/rootFinding/BisectionRootFinder/</path>
    <filename>a00028</filename>
    <namespace>Foam</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>a9b96b7c9831111052cd8e20bbf7e70dc</anchor>
      <arglist>(BisectionRootFinder, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>a0a9ebe865ba5bd9547a8fcd25fc64129</anchor>
      <arglist>(RootFinder, BisectionRootFinder, Word)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>add91ba8993eb562ebec552cd64caf6cb</anchor>
      <arglist>(RootFinder, BisectionRootFinder, Dictionary)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>af82504493aeeec75771d41a462f329b7</anchor>
      <arglist>(RootFinder, BisectionRootFinder, DictionaryOnly)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BisectionRootFinder.H</name>
    <path>/home/tiam/OpenFOAM/tiam-3.0.1/applications/libWallModelledLES/rootFinding/BisectionRootFinder/</path>
    <filename>a00029</filename>
    <class kind="class">Foam::BisectionRootFinder</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>EddyViscosity.C</name>
    <path>/home/tiam/OpenFOAM/tiam-3.0.1/applications/libWallModelledLES/eddyViscosities/EddyViscosity/</path>
    <filename>a00030</filename>
    <namespace>Foam</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>abeba83d18833ef611b4fbd762c5908d4</anchor>
      <arglist>(EddyViscosity, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineRunTimeSelectionTable</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>ad86222c5d6cc92adefe0059e33d11cf3</anchor>
      <arglist>(EddyViscosity, Dictionary)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineRunTimeSelectionTable</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>ae68b5b008473b4b8fde00947bd677aac</anchor>
      <arglist>(EddyViscosity, TypeAndDictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>EddyViscosity.H</name>
    <path>/home/tiam/OpenFOAM/tiam-3.0.1/applications/libWallModelledLES/eddyViscosities/EddyViscosity/</path>
    <filename>a00031</filename>
    <class kind="class">Foam::EddyViscosity</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>EquilibriumODEWallModelFvPatchScalarField.C</name>
    <path>/home/tiam/OpenFOAM/tiam-3.0.1/applications/libWallModelledLES/wallModels/</path>
    <filename>a00032</filename>
    <namespace>Foam</namespace>
    <member kind="function">
      <type></type>
      <name>makePatchTypeField</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>a7d42316010962e6ff68123686559ba78</anchor>
      <arglist>(fvPatchScalarField, EquilibriumODEWallModelFvPatchScalarField)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>EquilibriumODEWallModelFvPatchScalarField.H</name>
    <path>/home/tiam/OpenFOAM/tiam-3.0.1/applications/libWallModelledLES/wallModels/</path>
    <filename>a00033</filename>
    <class kind="class">Foam::EquilibriumODEWallModelFvPatchScalarField</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>JohnsonKingEddyViscosity.C</name>
    <path>/home/tiam/OpenFOAM/tiam-3.0.1/applications/libWallModelledLES/eddyViscosities/JohnsonKing/</path>
    <filename>a00034</filename>
    <namespace>Foam</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>a6dbced730fc665f04f5b1350bbd5ccae</anchor>
      <arglist>(JohnsonKingEddyViscosity, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>aefc488c30d51b4109966fc6024466f15</anchor>
      <arglist>(EddyViscosity, JohnsonKingEddyViscosity, Dictionary)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>a6a9a87b6b409a0e64da867a3e9fe7eb1</anchor>
      <arglist>(EddyViscosity, JohnsonKingEddyViscosity, TypeAndDictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>JohnsonKingEddyViscosity.H</name>
    <path>/home/tiam/OpenFOAM/tiam-3.0.1/applications/libWallModelledLES/eddyViscosities/JohnsonKing/</path>
    <filename>a00035</filename>
    <class kind="class">Foam::JohnsonKingEddyViscosity</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>LawOfTheWall.C</name>
    <path>/home/tiam/OpenFOAM/tiam-3.0.1/applications/libWallModelledLES/lawsOfTheWall/LawOfTheWall/</path>
    <filename>a00036</filename>
    <namespace>Foam</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>adfbd940fd5a3baae0e7697671788d1bb</anchor>
      <arglist>(LawOfTheWall, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineRunTimeSelectionTable</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>aabb8cdf6e9195c651ead3e68c3cd7dcd</anchor>
      <arglist>(LawOfTheWall, Dictionary)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineRunTimeSelectionTable</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>a4ec517a87c1dced5d839b045cb9b4747</anchor>
      <arglist>(LawOfTheWall, TypeAndDictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LawOfTheWall.H</name>
    <path>/home/tiam/OpenFOAM/tiam-3.0.1/applications/libWallModelledLES/lawsOfTheWall/LawOfTheWall/</path>
    <filename>a00037</filename>
    <class kind="class">Foam::LawOfTheWall</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>LOTWWallModelFvPatchScalarField.C</name>
    <path>/home/tiam/OpenFOAM/tiam-3.0.1/applications/libWallModelledLES/wallModels/</path>
    <filename>a00038</filename>
    <namespace>Foam</namespace>
    <member kind="function">
      <type></type>
      <name>makePatchTypeField</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>aeca0dec688f083e9b1822c7b58aecd52</anchor>
      <arglist>(fvPatchScalarField, LOTWWallModelFvPatchScalarField)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LOTWWallModelFvPatchScalarField.H</name>
    <path>/home/tiam/OpenFOAM/tiam-3.0.1/applications/libWallModelledLES/wallModels/</path>
    <filename>a00039</filename>
    <class kind="class">Foam::LOTWWallModelFvPatchScalarField</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>NewtonRootFinder.C</name>
    <path>/home/tiam/OpenFOAM/tiam-3.0.1/applications/libWallModelledLES/rootFinding/NewtonRootFinder/</path>
    <filename>a00040</filename>
    <namespace>Foam</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>aa651d33c0f42da34b14707a45e2119a7</anchor>
      <arglist>(NewtonRootFinder, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>abe6173ad162c08def78225b23968d2a7</anchor>
      <arglist>(RootFinder, NewtonRootFinder, Word)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>a88c4d4124681eee8cab32212b934c35c</anchor>
      <arglist>(RootFinder, NewtonRootFinder, Dictionary)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>aacb6e3c1acd76b2e09c040cc86828e58</anchor>
      <arglist>(RootFinder, NewtonRootFinder, DictionaryOnly)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>NewtonRootFinder.H</name>
    <path>/home/tiam/OpenFOAM/tiam-3.0.1/applications/libWallModelledLES/rootFinding/NewtonRootFinder/</path>
    <filename>a00041</filename>
    <class kind="class">Foam::NewtonRootFinder</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>ODEWallModelFvPatchScalarField.C</name>
    <path>/home/tiam/OpenFOAM/tiam-3.0.1/applications/libWallModelledLES/wallModels/</path>
    <filename>a00042</filename>
    <namespace>Foam</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>ad393c13c3edfb500ceac9c3144d4c6e8</anchor>
      <arglist>(ODEWallModelFvPatchScalarField, 0)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ODEWallModelFvPatchScalarField.H</name>
    <path>/home/tiam/OpenFOAM/tiam-3.0.1/applications/libWallModelledLES/wallModels/</path>
    <filename>a00043</filename>
    <class kind="class">Foam::ODEWallModelFvPatchScalarField</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>RootFinder.C</name>
    <path>/home/tiam/OpenFOAM/tiam-3.0.1/applications/libWallModelledLES/rootFinding/RootFinder/</path>
    <filename>a00044</filename>
    <namespace>Foam</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>abc5420b1bf80c8ebf8973438f9caa14a</anchor>
      <arglist>(RootFinder, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineRunTimeSelectionTable</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>af661cb4cec07708a7910e1b0bc250c10</anchor>
      <arglist>(RootFinder, Word)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineRunTimeSelectionTable</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>a6cd36770ce9d267466aacdb9ac7c1005</anchor>
      <arglist>(RootFinder, Dictionary)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineRunTimeSelectionTable</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>ae1fe0f38a3334c427952d42f4b95d411</anchor>
      <arglist>(RootFinder, DictionaryOnly)</arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>rootFinderDummy</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>a18ad435de4d8ea36266dd1e79023745a</anchor>
      <arglist>(scalar)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RootFinder.H</name>
    <path>/home/tiam/OpenFOAM/tiam-3.0.1/applications/libWallModelledLES/rootFinding/RootFinder/</path>
    <filename>a00045</filename>
    <class kind="class">Foam::RootFinder</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>SpaldingLawOfTheWall.C</name>
    <path>/home/tiam/OpenFOAM/tiam-3.0.1/applications/libWallModelledLES/lawsOfTheWall/SpaldingLawOfTheWall/</path>
    <filename>a00046</filename>
    <namespace>Foam</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>ab2b02f3527bb80bedeaecba09f3b8fd5</anchor>
      <arglist>(SpaldingLawOfTheWall, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>a6f816385a86e2b0a4b44877b5b1a4a7e</anchor>
      <arglist>(LawOfTheWall, SpaldingLawOfTheWall, Dictionary)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>a66762b0ccc0fe340e71c2e4990f280c0</anchor>
      <arglist>(LawOfTheWall, SpaldingLawOfTheWall, TypeAndDictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SpaldingLawOfTheWall.H</name>
    <path>/home/tiam/OpenFOAM/tiam-3.0.1/applications/libWallModelledLES/lawsOfTheWall/SpaldingLawOfTheWall/</path>
    <filename>a00047</filename>
    <class kind="class">Foam::SpaldingLawOfTheWall</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>testNewtonSecantRoot.C</name>
    <path>/home/tiam/OpenFOAM/tiam-3.0.1/applications/libWallModelledLES/tests/rootFinding/NewtonRoot/</path>
    <filename>a00048</filename>
    <class kind="struct">Foo</class>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>wallModelFvPatchScalarField.C</name>
    <path>/home/tiam/OpenFOAM/tiam-3.0.1/applications/libWallModelledLES/wallModels/</path>
    <filename>a00049</filename>
    <namespace>Foam</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>a191632a1828826f3708be360acf000ee</anchor>
      <arglist>(wallModelFvPatchScalarField, 0)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>wallModelFvPatchScalarField.H</name>
    <path>/home/tiam/OpenFOAM/tiam-3.0.1/applications/libWallModelledLES/wallModels/</path>
    <filename>a00050</filename>
    <class kind="class">Foam::wallModelFvPatchScalarField</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="file">
    <name>WernerWengleLawOfTheWall.C</name>
    <path>/home/tiam/OpenFOAM/tiam-3.0.1/applications/libWallModelledLES/lawsOfTheWall/WernerWengleLawOfTheWall/</path>
    <filename>a00051</filename>
    <namespace>Foam</namespace>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>abd91d26536bf334734ab8b2d4dbd7fd3</anchor>
      <arglist>(WernerWengleLawOfTheWall, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>a36c0a75164319d7da1eb52e6546573e5</anchor>
      <arglist>(LawOfTheWall, WernerWengleLawOfTheWall, Dictionary)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>ab742e8c0c205f8cb54293f50922277ed</anchor>
      <arglist>(LawOfTheWall, WernerWengleLawOfTheWall, TypeAndDictionary)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>WernerWengleLawOfTheWall.H</name>
    <path>/home/tiam/OpenFOAM/tiam-3.0.1/applications/libWallModelledLES/lawsOfTheWall/WernerWengleLawOfTheWall/</path>
    <filename>a00052</filename>
    <class kind="class">Foam::WernerWengleLawOfTheWall</class>
    <namespace>Foam</namespace>
  </compound>
  <compound kind="class">
    <name>BisectionRoot</name>
    <filename>a00001.html</filename>
  </compound>
  <compound kind="class">
    <name>BisectionRootFinder</name>
    <filename>a00003.html</filename>
  </compound>
  <compound kind="class">
    <name>EddyViscosity</name>
    <filename>a00005.html</filename>
  </compound>
  <compound kind="class">
    <name>EquilibriumODEWallModel</name>
    <filename>a00006.html</filename>
  </compound>
  <compound kind="struct">
    <name>Foo</name>
    <filename>a00008.html</filename>
    <member kind="function">
      <type>scalar</type>
      <name>val</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>ac43e281ce54a1d8b03e573430f965096</anchor>
      <arglist>(scalar f, scalar a)</arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>deriv</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>ac347e371414f5994032135e1e629a4f7</anchor>
      <arglist>(scalar f)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>JohnsonKingEddyViscosity</name>
    <filename>a00010.html</filename>
  </compound>
  <compound kind="class">
    <name>LawOfTheWall</name>
    <filename>a00011.html</filename>
  </compound>
  <compound kind="class">
    <name>LOTWWallModel</name>
    <filename>a00013.html</filename>
  </compound>
  <compound kind="class">
    <name>NewtonRoot</name>
    <filename>a00015.html</filename>
  </compound>
  <compound kind="class">
    <name>NewtonRootFinder</name>
    <filename>a00017.html</filename>
  </compound>
  <compound kind="class">
    <name>ODEWallModel</name>
    <filename>a00018.html</filename>
  </compound>
  <compound kind="class">
    <name>RootFinder</name>
    <filename>a00021.html</filename>
  </compound>
  <compound kind="class">
    <name>SpaldingLawOfTheWall</name>
    <filename>a00023.html</filename>
  </compound>
  <compound kind="class">
    <name>wallModel</name>
    <filename>a00024.html</filename>
  </compound>
  <compound kind="class">
    <name>WernerWengleLawOfTheWall</name>
    <filename>a00026.html</filename>
  </compound>
  <compound kind="namespace">
    <name>Foam</name>
    <filename>a00053.html</filename>
    <class kind="class">Foam::BisectionRootFinder</class>
    <class kind="class">Foam::EddyViscosity</class>
    <class kind="class">Foam::EquilibriumODEWallModelFvPatchScalarField</class>
    <class kind="class">Foam::JohnsonKingEddyViscosity</class>
    <class kind="class">Foam::LawOfTheWall</class>
    <class kind="class">Foam::LOTWWallModelFvPatchScalarField</class>
    <class kind="class">Foam::NewtonRootFinder</class>
    <class kind="class">Foam::ODEWallModelFvPatchScalarField</class>
    <class kind="class">Foam::RootFinder</class>
    <class kind="class">Foam::SpaldingLawOfTheWall</class>
    <class kind="class">Foam::wallModelFvPatchScalarField</class>
    <class kind="class">Foam::WernerWengleLawOfTheWall</class>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>abeba83d18833ef611b4fbd762c5908d4</anchor>
      <arglist>(EddyViscosity, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineRunTimeSelectionTable</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>ad86222c5d6cc92adefe0059e33d11cf3</anchor>
      <arglist>(EddyViscosity, Dictionary)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineRunTimeSelectionTable</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>ae68b5b008473b4b8fde00947bd677aac</anchor>
      <arglist>(EddyViscosity, TypeAndDictionary)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>a6dbced730fc665f04f5b1350bbd5ccae</anchor>
      <arglist>(JohnsonKingEddyViscosity, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>aefc488c30d51b4109966fc6024466f15</anchor>
      <arglist>(EddyViscosity, JohnsonKingEddyViscosity, Dictionary)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>a6a9a87b6b409a0e64da867a3e9fe7eb1</anchor>
      <arglist>(EddyViscosity, JohnsonKingEddyViscosity, TypeAndDictionary)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>adfbd940fd5a3baae0e7697671788d1bb</anchor>
      <arglist>(LawOfTheWall, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineRunTimeSelectionTable</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>aabb8cdf6e9195c651ead3e68c3cd7dcd</anchor>
      <arglist>(LawOfTheWall, Dictionary)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineRunTimeSelectionTable</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>a4ec517a87c1dced5d839b045cb9b4747</anchor>
      <arglist>(LawOfTheWall, TypeAndDictionary)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>ab2b02f3527bb80bedeaecba09f3b8fd5</anchor>
      <arglist>(SpaldingLawOfTheWall, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>a6f816385a86e2b0a4b44877b5b1a4a7e</anchor>
      <arglist>(LawOfTheWall, SpaldingLawOfTheWall, Dictionary)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>a66762b0ccc0fe340e71c2e4990f280c0</anchor>
      <arglist>(LawOfTheWall, SpaldingLawOfTheWall, TypeAndDictionary)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>abd91d26536bf334734ab8b2d4dbd7fd3</anchor>
      <arglist>(WernerWengleLawOfTheWall, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>a36c0a75164319d7da1eb52e6546573e5</anchor>
      <arglist>(LawOfTheWall, WernerWengleLawOfTheWall, Dictionary)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>ab742e8c0c205f8cb54293f50922277ed</anchor>
      <arglist>(LawOfTheWall, WernerWengleLawOfTheWall, TypeAndDictionary)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>a9b96b7c9831111052cd8e20bbf7e70dc</anchor>
      <arglist>(BisectionRootFinder, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>a0a9ebe865ba5bd9547a8fcd25fc64129</anchor>
      <arglist>(RootFinder, BisectionRootFinder, Word)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>add91ba8993eb562ebec552cd64caf6cb</anchor>
      <arglist>(RootFinder, BisectionRootFinder, Dictionary)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>af82504493aeeec75771d41a462f329b7</anchor>
      <arglist>(RootFinder, BisectionRootFinder, DictionaryOnly)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>aa651d33c0f42da34b14707a45e2119a7</anchor>
      <arglist>(NewtonRootFinder, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>abe6173ad162c08def78225b23968d2a7</anchor>
      <arglist>(RootFinder, NewtonRootFinder, Word)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>a88c4d4124681eee8cab32212b934c35c</anchor>
      <arglist>(RootFinder, NewtonRootFinder, Dictionary)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>addToRunTimeSelectionTable</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>aacb6e3c1acd76b2e09c040cc86828e58</anchor>
      <arglist>(RootFinder, NewtonRootFinder, DictionaryOnly)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>abc5420b1bf80c8ebf8973438f9caa14a</anchor>
      <arglist>(RootFinder, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineRunTimeSelectionTable</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>af661cb4cec07708a7910e1b0bc250c10</anchor>
      <arglist>(RootFinder, Word)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineRunTimeSelectionTable</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>a6cd36770ce9d267466aacdb9ac7c1005</anchor>
      <arglist>(RootFinder, Dictionary)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineRunTimeSelectionTable</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>ae1fe0f38a3334c427952d42f4b95d411</anchor>
      <arglist>(RootFinder, DictionaryOnly)</arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>rootFinderDummy</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>a18ad435de4d8ea36266dd1e79023745a</anchor>
      <arglist>(scalar)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>makePatchTypeField</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>a7d42316010962e6ff68123686559ba78</anchor>
      <arglist>(fvPatchScalarField, EquilibriumODEWallModelFvPatchScalarField)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>makePatchTypeField</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>aeca0dec688f083e9b1822c7b58aecd52</anchor>
      <arglist>(fvPatchScalarField, LOTWWallModelFvPatchScalarField)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>ad393c13c3edfb500ceac9c3144d4c6e8</anchor>
      <arglist>(ODEWallModelFvPatchScalarField, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>defineTypeNameAndDebug</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>a191632a1828826f3708be360acf000ee</anchor>
      <arglist>(wallModelFvPatchScalarField, 0)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::BisectionRootFinder</name>
    <filename>a00002.html</filename>
    <base>Foam::RootFinder</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a7d6e9a194962b0d3115a336e88a88cfa</anchor>
      <arglist>(&quot;Bisection&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BisectionRootFinder</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>ac7b518aa26ba851a4b709579a1a83162</anchor>
      <arglist>(const word &amp;rootFinderName, std::function&lt; scalar(scalar)&gt;, std::function&lt; scalar(scalar)&gt;, const scalar eps, const label maxIter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BisectionRootFinder</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>affa50f5e1f238f49df10bb02b66f752a</anchor>
      <arglist>(std::function&lt; scalar(scalar)&gt;, std::function&lt; scalar(scalar)&gt;, const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BisectionRootFinder</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>ad74247e23f3c7bf2b7cee97d506cb1f5</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BisectionRootFinder</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a3c4c6452fa7a7e6164945bf19b46f82f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>bracket</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>aeefbcee259c8cebd0cc3d416991420ae</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>root</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a07923af10fa2f04dd64b3ba4a3f858ff</anchor>
      <arglist>(scalar x0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>ab81954fea5f579ff707f1117983e32af</anchor>
      <arglist>(Ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a12a22c76675e1138c52924cd2ef3c778</anchor>
      <arglist>(&quot;RootFinder&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RootFinder</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>ad1958c66a592fc3839e806c2bc870c85</anchor>
      <arglist>(const word &amp;rootFinderName, std::function&lt; scalar(scalar)&gt; f, std::function&lt; scalar(scalar)&gt; d, const scalar eps, const label maxIter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RootFinder</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a4047dea45917ffc747d6126cbe161824</anchor>
      <arglist>(std::function&lt; scalar(scalar)&gt; f, std::function&lt; scalar(scalar)&gt; d, const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RootFinder</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a1eeec8242555ae8a836630ad5026f755</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RootFinder</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a5e0936d088a91a2db3cd548f0f0af05f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>declareRunTimeSelectionTable</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>ab82f197664a5adbb242d1495943c7466</anchor>
      <arglist>(autoPtr, RootFinder, Word,(const word &amp;rootFinderName, std::function&lt; scalar(scalar)&gt; f, std::function&lt; scalar(scalar)&gt; d, const scalar eps, const label maxIter),(rootFinderName, f, d, eps, maxIter)) declareRunTimeSelectionTable(autoPtr</arglist>
    </member>
    <member kind="function">
      <type>std::function&lt; scalar(scalar)&gt; std::function&lt; scalar(scalar)&gt; const dictionary dict</type>
      <name>declareRunTimeSelectionTable</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a19229296a4e6bd5eb955da80d806b64c</anchor>
      <arglist>(autoPtr, RootFinder, DictionaryOnly,(const dictionary &amp;dict),(dict)) static autoPtr&lt; RootFinder &gt; New(const word &amp;rootFinderName</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFunction</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a19b2ccb17488790c6faffbf8a0b37489</anchor>
      <arglist>(std::function&lt; scalar(scalar)&gt; f)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDerivative</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a69f1f1b67afc4f4adfb504a109f05b3e</anchor>
      <arglist>(std::function&lt; scalar(scalar)&gt; d)</arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>eps</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>abd5dadd5b06a8f182b5ab98429242597</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>label</type>
      <name>maxIter</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a8c2e5ff69e5f47060c11c4c14d49d6e6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::function&lt; scalar(scalar)&gt;</type>
      <name>f</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a5610733e1d94aa002ec528a3a9a8f0a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::function&lt; scalar(scalar)&gt;</type>
      <name>d</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a93756a6ee07cfe60ed0d3c67fca29155</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static autoPtr&lt; RootFinder &gt;</type>
      <name>New</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a7a5ed89d8a7dbea15ccfde01255ad108</anchor>
      <arglist>(std::function&lt; scalar(scalar)&gt; f, std::function&lt; scalar(scalar)&gt; d, const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static autoPtr&lt; RootFinder &gt;</type>
      <name>New</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a202c02123770cb9e2e7cf05579f6f66d</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>RootFinder</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a2a522651dd5bcfbf2d90f9d29675ee25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>Dictionary</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a75d0a1670704923e348986686c3714f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::function&lt; scalar(scalar)&gt;</type>
      <name>f</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a827954d97f23e6d50ca9e11c3488ac5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::function&lt; scalar(scalar)&gt; std::function&lt; scalar(scalar)&gt;</type>
      <name>d</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a1da786cae7873119be67ed2d3f58ddc3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::function&lt; scalar(scalar)&gt; std::function&lt; scalar(scalar)&gt; const dictionary &amp;</type>
      <name>dict</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a43664ed477fc4e92abaf08a5ac2d3f0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::function&lt; scalar(scalar)&gt; std::function&lt; scalar(scalar)&gt; const dictionary</type>
      <name>f</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a6ae56e3c3bc15a96d016493f534438ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::function&lt; scalar(scalar)&gt; std::function&lt; scalar(scalar)&gt; const dictionary</type>
      <name>d</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a1a27782dfa3155b56ccc8d1a70b14ff5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::function&lt; scalar(scalar)&gt; std::function&lt; scalar(scalar)&gt; const dictionary dict std::function&lt; scalar(scalar)&gt;</type>
      <name>f</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a38adf3bb9303e0346680d941866357cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::function&lt; scalar(scalar)&gt; std::function&lt; scalar(scalar)&gt; const dictionary dict std::function&lt; scalar(scalar)&gt; std::function&lt; scalar(scalar)&gt;</type>
      <name>d</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>adbc1dbd316204a202cbcbefe49e96ba0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::function&lt; scalar(scalar)&gt; std::function&lt; scalar(scalar)&gt; const dictionary dict std::function&lt; scalar(scalar)&gt; std::function&lt; scalar(scalar)&gt; const scalar</type>
      <name>eps</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a8c94b2b498dfa798c89600f2f7f7761a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::function&lt; scalar(scalar)&gt; std::function&lt; scalar(scalar)&gt; const dictionary dict std::function&lt; scalar(scalar)&gt; std::function&lt; scalar(scalar)&gt; const scalar const label</type>
      <name>maxIter</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a4f6ecb4d6474e116402d41461afe4465</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::function&lt; scalar(scalar)&gt;</type>
      <name>f_</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a4b3f09b61331b656bc0d19b6395818ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::function&lt; scalar(scalar)&gt;</type>
      <name>d_</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a59d7cd8e215bbdb0e21c1509288e9c03</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const scalar</type>
      <name>eps_</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>ad1606061c9c63fafe91c6663d234c32b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const label</type>
      <name>maxIter_</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a5e0f2077a581e307e6eee99a71a99df5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::EddyViscosity</name>
    <filename>a00004.html</filename>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>a0261a41f27b858f4ac2db7ff657831e9</anchor>
      <arglist>(&quot;EddyViscosity&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EddyViscosity</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>a0b9184ae55f3dd1e015b7561c452dbfd</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EddyViscosity</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>a4bc81c565c4f9626447c6baeec48bae6</anchor>
      <arglist>(const word &amp;modelName, const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~EddyViscosity</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>ab63f5ab74dbdc094020ae72fb9ce3622</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>declareRunTimeSelectionTable</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>a6ce29b94baec88667a665fd4ee800a89</anchor>
      <arglist>(autoPtr, EddyViscosity, Dictionary,(const dictionary &amp;dict),(dict)) declareRunTimeSelectionTable(autoPtr</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>printCoeffs</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>a5a77b86366b53d157589dded2158e7fe</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual scalarList</type>
      <name>value</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>a01418d89dd24cfa203bb6624c2370fc8</anchor>
      <arglist>(const scalarList &amp;y, scalar uTau, scalar nu) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>a4bc86b48333705e13add9de0db8eebd3</anchor>
      <arglist>(Ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>dictionary</type>
      <name>constDict</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>a12da6438f20105a8b0f40be225d8e526</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>const word const dictionary static dict autoPtr&lt; EddyViscosity &gt;</type>
      <name>New</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>a422573e0237539e5d9a74b55af387d61</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static autoPtr&lt; EddyViscosity &gt;</type>
      <name>New</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>a51b843effaecaaef379245b49b91a21f</anchor>
      <arglist>(const word &amp;lawName, const dictionary &amp;dict)</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>EddyViscosity</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>a433eee4461a9e267b9fd6d366df65fc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>TypeAndDictionary</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>afac8d3ff885f650f21c3619f07b80f7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const word &amp;</type>
      <name>modelName</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>a55f8d5856f16e4b5b720000f15f5b47b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const word const dictionary &amp;</type>
      <name>dict</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>a230cd0dedf054e7abdcea2ed702937aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const word const dictionary</type>
      <name>modelName</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>a031afa84b61a4109276c7d69d8364501</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>dictionary</type>
      <name>constDict_</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>a89621c07d595d033d4ca706c67b2c492</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::EquilibriumODEWallModelFvPatchScalarField</name>
    <filename>a00007.html</filename>
    <base>Foam::ODEWallModelFvPatchScalarField</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00007.html</anchorfile>
      <anchor>af6844ba0a5eaf8542c889fdb196d72d1</anchor>
      <arglist>(&quot;EquilibriumODEWallModel&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EquilibriumODEWallModelFvPatchScalarField</name>
      <anchorfile>a00007.html</anchorfile>
      <anchor>a364af3c5dcc41b55e08fb2d564233aef</anchor>
      <arglist>(const fvPatch &amp;, const DimensionedField&lt; scalar, volMesh &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EquilibriumODEWallModelFvPatchScalarField</name>
      <anchorfile>a00007.html</anchorfile>
      <anchor>a4d751313112e2495f79bd98b6b308b54</anchor>
      <arglist>(const fvPatch &amp;, const DimensionedField&lt; scalar, volMesh &gt; &amp;, const dictionary &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EquilibriumODEWallModelFvPatchScalarField</name>
      <anchorfile>a00007.html</anchorfile>
      <anchor>ae104519f9fbc430aa6bb3c8aa2206472</anchor>
      <arglist>(const EquilibriumODEWallModelFvPatchScalarField &amp;, const fvPatch &amp;, const DimensionedField&lt; scalar, volMesh &gt; &amp;, const fvPatchFieldMapper &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EquilibriumODEWallModelFvPatchScalarField</name>
      <anchorfile>a00007.html</anchorfile>
      <anchor>aa65a203d29c0ac5009983926f095497a</anchor>
      <arglist>(const EquilibriumODEWallModelFvPatchScalarField &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; fvPatchScalarField &gt;</type>
      <name>clone</name>
      <anchorfile>a00007.html</anchorfile>
      <anchor>afdeceecb1c75e9ccc98c2f489fe8fa00</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EquilibriumODEWallModelFvPatchScalarField</name>
      <anchorfile>a00007.html</anchorfile>
      <anchor>ab29e026f8ee281b14d7a71e8da5fb0f7</anchor>
      <arglist>(const EquilibriumODEWallModelFvPatchScalarField &amp;, const DimensionedField&lt; scalar, volMesh &gt; &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; fvPatchScalarField &gt;</type>
      <name>clone</name>
      <anchorfile>a00007.html</anchorfile>
      <anchor>a8a53cadd8227f307947ec9c8750e5f11</anchor>
      <arglist>(const DimensionedField&lt; scalar, volMesh &gt; &amp;iF) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>a00007.html</anchorfile>
      <anchor>a4bc86b48333705e13add9de0db8eebd3</anchor>
      <arglist>(Ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>abcbd7b68efc0daf49fa3274a5d121344</anchor>
      <arglist>(&quot;ODEWallModel&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ODEWallModelFvPatchScalarField</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>ab2666613349107e2c659db0f0c6ace85</anchor>
      <arglist>(const fvPatch &amp;, const DimensionedField&lt; scalar, volMesh &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ODEWallModelFvPatchScalarField</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>ab627afed87f03fd4101eef1450d03047</anchor>
      <arglist>(const fvPatch &amp;, const DimensionedField&lt; scalar, volMesh &gt; &amp;, const dictionary &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ODEWallModelFvPatchScalarField</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>a00dc4a45c53ae9a5f8d31f8ca999a36b</anchor>
      <arglist>(const ODEWallModelFvPatchScalarField &amp;, const fvPatch &amp;, const DimensionedField&lt; scalar, volMesh &gt; &amp;, const fvPatchFieldMapper &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ODEWallModelFvPatchScalarField</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>aaecfba9fa49be99bcf06c6e511e75a7f</anchor>
      <arglist>(const ODEWallModelFvPatchScalarField &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ODEWallModelFvPatchScalarField</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>a704847adbb7a78e8f7987f4738b9c34b</anchor>
      <arglist>(const ODEWallModelFvPatchScalarField &amp;, const DimensionedField&lt; scalar, volMesh &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>eps</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>abd5dadd5b06a8f182b5ab98429242597</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>maxIter</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>a04e697528a12775faec6e489e03b3f93</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>ad07bbf2770649c14f9c95916676bb628</anchor>
      <arglist>(&quot;wallModel&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>wallModelFvPatchScalarField</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>acf2e342a02ebc70daa987dea6a721e1f</anchor>
      <arglist>(const fvPatch &amp;, const DimensionedField&lt; scalar, volMesh &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>wallModelFvPatchScalarField</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>a24bc213383412fd17d6238665a4f33ca</anchor>
      <arglist>(const fvPatch &amp;, const DimensionedField&lt; scalar, volMesh &gt; &amp;, const dictionary &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>wallModelFvPatchScalarField</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>aefec87fecdf32653d17b9071f5b38c15</anchor>
      <arglist>(const wallModelFvPatchScalarField &amp;, const fvPatch &amp;, const DimensionedField&lt; scalar, volMesh &gt; &amp;, const fvPatchFieldMapper &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>wallModelFvPatchScalarField</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>a3ecd6e4b2620be0d281a693e046e5369</anchor>
      <arglist>(const wallModelFvPatchScalarField &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>wallModelFvPatchScalarField</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>acf6e330d86df683b02c6d50f8002c81c</anchor>
      <arglist>(const wallModelFvPatchScalarField &amp;, const DimensionedField&lt; scalar, volMesh &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>createCellIndexList</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>aefd32926f3dfc01c29d70130c0f73400</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>labelList</type>
      <name>cellIndexList</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>ad5ef67926b566fd70d5a37d47c88e9dc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>scalarField</type>
      <name>h</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>a1b7b2fd43fcfe7b81033dfa749ffc8c3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateCoeffs</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>a7e24eafac629d3733181cd942d4c902f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>writeLocalEntries</name>
      <anchorfile>a00007.html</anchorfile>
      <anchor>a80ea4d185acff1512e1eabb1f75abdbc</anchor>
      <arglist>(Ostream &amp;) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>scalar</type>
      <name>source</name>
      <anchorfile>a00007.html</anchorfile>
      <anchor>afbae4798b0f93804f0a0347cf5e65c81</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual tmp&lt; scalarField &gt;</type>
      <name>calcNut</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>a3d7b33c5eb572bc4684ad4c690a762b8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual tmp&lt; scalarField &gt;</type>
      <name>calcUTau</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>ae25618605cc43ad323d8b5c1f423fc0a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>createMeshes</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>a973f18ce9337fd9e98bd94d1ece31d07</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>scalar</type>
      <name>integrate</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>aac6e59b700f28d4c9ea7c39afbaea2e0</anchor>
      <arglist>(const scalarList &amp;y, const scalarList &amp;v) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>createFields</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>a736264d6407c6bb691d0e8ab06b512a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>checkType</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>ad72f1118ee25d5a9fcb73f4c5d8ea9d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>tmp&lt; scalarField &gt;</type>
      <name>calcUTauBench</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>a9b3193f0331de1159721a8ce80353a6d</anchor>
      <arglist>(const scalarField &amp;magGradU) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>autoPtr&lt; EddyViscosity &gt;</type>
      <name>eddyViscosity_</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>a9175f0fff14699e6bdf5ff832734949c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>scalarListList</type>
      <name>meshes_</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>a989f55857c27a7c640ea413016da8e46</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>label</type>
      <name>maxIter_</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>a08a86c86913151ad4f87a2bc7c6cf278</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>scalar</type>
      <name>eps_</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>a925e1d82e34e1f95d538eecf9384f764</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>labelList</type>
      <name>cellIndexList_</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>a16bc8a8c766db655ce1dc06986930d2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>scalarField</type>
      <name>h_</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>a12b89dbb902882a071ffc223aa32c722</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::JohnsonKingEddyViscosity</name>
    <filename>a00009.html</filename>
    <base>Foam::EddyViscosity</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00009.html</anchorfile>
      <anchor>a911086ad4b6e47a917f79cfe82001f1d</anchor>
      <arglist>(&quot;JohnsonKing&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JohnsonKingEddyViscosity</name>
      <anchorfile>a00009.html</anchorfile>
      <anchor>a5e2602add1f2e7468e51ebf32dfec8c8</anchor>
      <arglist>(const dictionary &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JohnsonKingEddyViscosity</name>
      <anchorfile>a00009.html</anchorfile>
      <anchor>a1c4b736126c25c2211aa42a27b767a8e</anchor>
      <arglist>(const word &amp;, const dictionary &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~JohnsonKingEddyViscosity</name>
      <anchorfile>a00009.html</anchorfile>
      <anchor>ad923514ec45608dc9b5cd9c098892fdf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>APlus</name>
      <anchorfile>a00009.html</anchorfile>
      <anchor>a804cc8388121fab5d63e02916f16bdbb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>kappa</name>
      <anchorfile>a00009.html</anchorfile>
      <anchor>a51aabfa5bff108f8e0415db3252d54fd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printCoeffs</name>
      <anchorfile>a00009.html</anchorfile>
      <anchor>a9ad833b12bb467ea30cbc57305c60754</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual scalarList</type>
      <name>value</name>
      <anchorfile>a00009.html</anchorfile>
      <anchor>ae0055735b56ae7df372dee183ed7e016</anchor>
      <arglist>(const scalarList &amp;y, scalar uTau, scalar nu) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::LawOfTheWall</name>
    <filename>a00012.html</filename>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>a2224a6f0afdc24cb69fcf7a699047825</anchor>
      <arglist>(&quot;LawOfTheWall&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LawOfTheWall</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>a783806d5f63cd66002ddba0fd167afc0</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LawOfTheWall</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>a80e2731f94847654e854d0cbf73d3ef3</anchor>
      <arglist>(const word &amp;lawName, const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LawOfTheWall</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>a726c8fe7356182a9d5a263c09b42f09d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>declareRunTimeSelectionTable</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>a0c2a8d8b77c2442c66c19ab394ea22c5</anchor>
      <arglist>(autoPtr, LawOfTheWall, Dictionary,(const dictionary &amp;dict),(dict)) declareRunTimeSelectionTable(autoPtr</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>printCoeffs</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>a5a77b86366b53d157589dded2158e7fe</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual scalar</type>
      <name>value</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>a91a16ce0ce0e784c4adec2016b7f896c</anchor>
      <arglist>(scalar u, scalar y, scalar uTau, scalar nu) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual scalar</type>
      <name>derivative</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>a78c31a8ae1645aa34229cc005a3d3270</anchor>
      <arglist>(scalar u, scalar y, scalar uTau, scalar nu) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>a4bc86b48333705e13add9de0db8eebd3</anchor>
      <arglist>(Ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>dictionary</type>
      <name>constDict</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>a12da6438f20105a8b0f40be225d8e526</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>const word const dictionary static dict autoPtr&lt; LawOfTheWall &gt;</type>
      <name>New</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>a156238013fdf2899baeef9db60d83a0c</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static autoPtr&lt; LawOfTheWall &gt;</type>
      <name>New</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>a38941642844d15ae5f87d6753da15a6c</anchor>
      <arglist>(const word &amp;lawName, const dictionary &amp;dict)</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>LawOfTheWall</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>a34fb435ba66c70ec68d6056daa6d6e7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>TypeAndDictionary</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>afac8d3ff885f650f21c3619f07b80f7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const word &amp;</type>
      <name>lawName</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>af770c32512a3ad97aeeff3044b06a8e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const word const dictionary &amp;</type>
      <name>dict</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>a230cd0dedf054e7abdcea2ed702937aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const word const dictionary</type>
      <name>lawName</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>a7f7fda54c821ee84423f87eddec6f273</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>dictionary</type>
      <name>constDict_</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>a89621c07d595d033d4ca706c67b2c492</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::LOTWWallModelFvPatchScalarField</name>
    <filename>a00014.html</filename>
    <base>Foam::wallModelFvPatchScalarField</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>a141cc156c5a52416277872261e3bd5c8</anchor>
      <arglist>(&quot;LOTWWallModel&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LOTWWallModelFvPatchScalarField</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>a3cd3b42017af419ae133cec39f0b2a09</anchor>
      <arglist>(const fvPatch &amp;, const DimensionedField&lt; scalar, volMesh &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LOTWWallModelFvPatchScalarField</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>ac5d4b1e6d4c849f54f3e42b58bac8b13</anchor>
      <arglist>(const fvPatch &amp;, const DimensionedField&lt; scalar, volMesh &gt; &amp;, const dictionary &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LOTWWallModelFvPatchScalarField</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>ae4fcbcb0622192a59fdd07cc860d331b</anchor>
      <arglist>(const LOTWWallModelFvPatchScalarField &amp;, const fvPatch &amp;, const DimensionedField&lt; scalar, volMesh &gt; &amp;, const fvPatchFieldMapper &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LOTWWallModelFvPatchScalarField</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>a357d2f7f7631724afb5fa2c0671f24a3</anchor>
      <arglist>(const LOTWWallModelFvPatchScalarField &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; fvPatchScalarField &gt;</type>
      <name>clone</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>afdeceecb1c75e9ccc98c2f489fe8fa00</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LOTWWallModelFvPatchScalarField</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>a605ebf6b5a94e1a6aefa5c7495140d3b</anchor>
      <arglist>(const LOTWWallModelFvPatchScalarField &amp;, const DimensionedField&lt; scalar, volMesh &gt; &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tmp&lt; fvPatchScalarField &gt;</type>
      <name>clone</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>a8a53cadd8227f307947ec9c8750e5f11</anchor>
      <arglist>(const DimensionedField&lt; scalar, volMesh &gt; &amp;iF) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>a4bc86b48333705e13add9de0db8eebd3</anchor>
      <arglist>(Ostream &amp;os) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>writeLocalEntries</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>a80ea4d185acff1512e1eabb1f75abdbc</anchor>
      <arglist>(Ostream &amp;) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual tmp&lt; scalarField &gt;</type>
      <name>calcNut</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>a3d7b33c5eb572bc4684ad4c690a762b8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual tmp&lt; scalarField &gt;</type>
      <name>calcUTau</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>ae25618605cc43ad323d8b5c1f423fc0a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>autoPtr&lt; RootFinder &gt;</type>
      <name>rootFinder_</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>a5254cca22c3e1c679c2a310d445e30fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>autoPtr&lt; LawOfTheWall &gt;</type>
      <name>law_</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>a731f5bdf0dc6ae9b532b97a02daaa915</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::NewtonRootFinder</name>
    <filename>a00016.html</filename>
    <base>Foam::RootFinder</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a738faf21165fef48e59f53648709f6f0</anchor>
      <arglist>(&quot;Newton&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NewtonRootFinder</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a28e7be045500ec65b900cd243c6271a5</anchor>
      <arglist>(const word &amp;rootFinderName, std::function&lt; scalar(scalar)&gt; f, std::function&lt; scalar(scalar)&gt; d, const scalar eps, const label maxIter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NewtonRootFinder</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a82d59534943322043d15e235a09f10b7</anchor>
      <arglist>(std::function&lt; scalar(scalar)&gt; f, std::function&lt; scalar(scalar)&gt; d, const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NewtonRootFinder</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a0995d281f1cd30425429947e2e161229</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NewtonRootFinder</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a0cb60f157346658b196e44056768894c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>root</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a07923af10fa2f04dd64b3ba4a3f858ff</anchor>
      <arglist>(scalar x0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>ab81954fea5f579ff707f1117983e32af</anchor>
      <arglist>(Ostream &amp;os) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::ODEWallModelFvPatchScalarField</name>
    <filename>a00019.html</filename>
    <base>Foam::wallModelFvPatchScalarField</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>a4bc86b48333705e13add9de0db8eebd3</anchor>
      <arglist>(Ostream &amp;os) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>writeLocalEntries</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>a80ea4d185acff1512e1eabb1f75abdbc</anchor>
      <arglist>(Ostream &amp;) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual scalar</type>
      <name>source</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>a3617dd7e5d40ca8c2d969cb6c55d53c0</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::RootFinder</name>
    <filename>a00020.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual scalar</type>
      <name>root</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>af2c53858aa28bea55cc7ea7bef94a886</anchor>
      <arglist>(scalar) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a4bc86b48333705e13add9de0db8eebd3</anchor>
      <arglist>(Ostream &amp;os) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::SpaldingLawOfTheWall</name>
    <filename>a00022.html</filename>
    <base>Foam::LawOfTheWall</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>ae364f9d96c3bb886e6fc3ae7aaa29197</anchor>
      <arglist>(&quot;Spalding&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SpaldingLawOfTheWall</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a47f4353241182e6e759c6a7c5655d260</anchor>
      <arglist>(const dictionary &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SpaldingLawOfTheWall</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a12d0c7c564d2f141f24276757bb1ced2</anchor>
      <arglist>(const word &amp;lawname, const dictionary &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SpaldingLawOfTheWall</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>af832a2308c1575859f62f6540044da86</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>kappa</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a51aabfa5bff108f8e0415db3252d54fd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>B</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a4a89c8712206e662f92661d0bd1fe0ed</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printCoeffs</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a9ad833b12bb467ea30cbc57305c60754</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual scalar</type>
      <name>value</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>acb415cbd62f69917ea28ab196db3bc90</anchor>
      <arglist>(scalar u, scalar y, scalar uTau, scalar nu) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual scalar</type>
      <name>derivative</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a5b03a583cfd6ea8f3aeecc170261b799</anchor>
      <arglist>(scalar u, scalar y, scalar uTau, scalar nu) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::wallModelFvPatchScalarField</name>
    <filename>a00025.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>a0941061ad5a26be83b4107d05750ace6</anchor>
      <arglist>(Ostream &amp;) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual tmp&lt; scalarField &gt;</type>
      <name>calcNut</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>ace0ac1d725eea6c253fed4cd7b860e34</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>writeLocalEntries</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>a80ea4d185acff1512e1eabb1f75abdbc</anchor>
      <arglist>(Ostream &amp;) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Foam::WernerWengleLawOfTheWall</name>
    <filename>a00027.html</filename>
    <base>Foam::LawOfTheWall</base>
    <member kind="function">
      <type></type>
      <name>TypeName</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>acf1f2fb3b32ae6c0397330939857400e</anchor>
      <arglist>(&quot;WernerWengle&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>WernerWengleLawOfTheWall</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>aff8040f21935c4c78389080c77db5ec6</anchor>
      <arglist>(const dictionary &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>WernerWengleLawOfTheWall</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>a535b5a1e951f41cd1573a72991bb4e78</anchor>
      <arglist>(const word &amp;, const dictionary &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~WernerWengleLawOfTheWall</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>a3611f544aaa4e0a433adf6131cb99fe7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>A</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>a2505c30a69fdc6c2f7c1d3243580614a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>B</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>a4a89c8712206e662f92661d0bd1fe0ed</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printCoeffs</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>a9ad833b12bb467ea30cbc57305c60754</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual scalar</type>
      <name>value</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>acb415cbd62f69917ea28ab196db3bc90</anchor>
      <arglist>(scalar u, scalar y, scalar uTau, scalar nu) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual scalar</type>
      <name>derivative</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>a5b03a583cfd6ea8f3aeecc170261b799</anchor>
      <arglist>(scalar u, scalar y, scalar uTau, scalar nu) const </arglist>
    </member>
  </compound>
  <compound kind="dir">
    <name>applications</name>
    <path>/home/tiam/OpenFOAM/tiam-3.0.1/applications/</path>
    <filename>dir_c9afec20a8458dc29c661cd2540df8e0.html</filename>
    <dir>libWallModelledLES</dir>
  </compound>
  <compound kind="dir">
    <name>BisectionRootFinder</name>
    <path>/home/tiam/OpenFOAM/tiam-3.0.1/applications/libWallModelledLES/rootFinding/BisectionRootFinder/</path>
    <filename>dir_7d5a0f0d004a18eca5ac13c507787192.html</filename>
    <file>BisectionRootFinder.C</file>
    <file>BisectionRootFinder.H</file>
  </compound>
  <compound kind="dir">
    <name>eddyViscosities</name>
    <path>/home/tiam/OpenFOAM/tiam-3.0.1/applications/libWallModelledLES/eddyViscosities/</path>
    <filename>dir_3c94c7d08e3c8b1dab9a3df89dc464ef.html</filename>
    <dir>EddyViscosity</dir>
    <dir>JohnsonKing</dir>
  </compound>
  <compound kind="dir">
    <name>EddyViscosity</name>
    <path>/home/tiam/OpenFOAM/tiam-3.0.1/applications/libWallModelledLES/eddyViscosities/EddyViscosity/</path>
    <filename>dir_284f6cadc20e618017e589474d47e5f5.html</filename>
    <file>EddyViscosity.C</file>
    <file>EddyViscosity.H</file>
  </compound>
  <compound kind="dir">
    <name>home</name>
    <path>/home/</path>
    <filename>dir_75b82e7e4a5feb05200b9ad7adf06257.html</filename>
    <dir>tiam</dir>
  </compound>
  <compound kind="dir">
    <name>JohnsonKing</name>
    <path>/home/tiam/OpenFOAM/tiam-3.0.1/applications/libWallModelledLES/eddyViscosities/JohnsonKing/</path>
    <filename>dir_4c5f409b16efbcfd1b394675331bb9bc.html</filename>
    <file>JohnsonKingEddyViscosity.C</file>
    <file>JohnsonKingEddyViscosity.H</file>
  </compound>
  <compound kind="dir">
    <name>LawOfTheWall</name>
    <path>/home/tiam/OpenFOAM/tiam-3.0.1/applications/libWallModelledLES/lawsOfTheWall/LawOfTheWall/</path>
    <filename>dir_7b4d055034caec9d43f55a610d520b9a.html</filename>
    <file>LawOfTheWall.C</file>
    <file>LawOfTheWall.H</file>
  </compound>
  <compound kind="dir">
    <name>lawsOfTheWall</name>
    <path>/home/tiam/OpenFOAM/tiam-3.0.1/applications/libWallModelledLES/lawsOfTheWall/</path>
    <filename>dir_7818837239d25b3c79abf931205b0736.html</filename>
    <dir>LawOfTheWall</dir>
    <dir>SpaldingLawOfTheWall</dir>
    <dir>WernerWengleLawOfTheWall</dir>
  </compound>
  <compound kind="dir">
    <name>libWallModelledLES</name>
    <path>/home/tiam/OpenFOAM/tiam-3.0.1/applications/libWallModelledLES/</path>
    <filename>dir_9380ca81c57be0c997c02a0e479b223f.html</filename>
    <dir>eddyViscosities</dir>
    <dir>lawsOfTheWall</dir>
    <dir>rootFinding</dir>
    <dir>tests</dir>
    <dir>wallModels</dir>
  </compound>
  <compound kind="dir">
    <name>NewtonRoot</name>
    <path>/home/tiam/OpenFOAM/tiam-3.0.1/applications/libWallModelledLES/tests/rootFinding/NewtonRoot/</path>
    <filename>dir_7820ea90cab60add103cc108ca8fd11b.html</filename>
    <file>testNewtonSecantRoot.C</file>
  </compound>
  <compound kind="dir">
    <name>NewtonRootFinder</name>
    <path>/home/tiam/OpenFOAM/tiam-3.0.1/applications/libWallModelledLES/rootFinding/NewtonRootFinder/</path>
    <filename>dir_6727bff5339f2984483cf2675ecb61d8.html</filename>
    <file>NewtonRootFinder.C</file>
    <file>NewtonRootFinder.H</file>
  </compound>
  <compound kind="dir">
    <name>OpenFOAM</name>
    <path>/home/tiam/OpenFOAM/</path>
    <filename>dir_4a020c35808db6b2119267aed3865f17.html</filename>
    <dir>tiam-3.0.1</dir>
  </compound>
  <compound kind="dir">
    <name>RootFinder</name>
    <path>/home/tiam/OpenFOAM/tiam-3.0.1/applications/libWallModelledLES/rootFinding/RootFinder/</path>
    <filename>dir_f916c0b102fd96e31432bfcc2d79398f.html</filename>
    <file>RootFinder.C</file>
    <file>RootFinder.H</file>
  </compound>
  <compound kind="dir">
    <name>rootFinding</name>
    <path>/home/tiam/OpenFOAM/tiam-3.0.1/applications/libWallModelledLES/tests/rootFinding/</path>
    <filename>dir_7bb9e8889189f042fbdb623ae2820909.html</filename>
    <dir>NewtonRoot</dir>
  </compound>
  <compound kind="dir">
    <name>rootFinding</name>
    <path>/home/tiam/OpenFOAM/tiam-3.0.1/applications/libWallModelledLES/rootFinding/</path>
    <filename>dir_7c3adfef571ce61c62d2e605feaebd4b.html</filename>
    <dir>BisectionRootFinder</dir>
    <dir>NewtonRootFinder</dir>
    <dir>RootFinder</dir>
  </compound>
  <compound kind="dir">
    <name>SpaldingLawOfTheWall</name>
    <path>/home/tiam/OpenFOAM/tiam-3.0.1/applications/libWallModelledLES/lawsOfTheWall/SpaldingLawOfTheWall/</path>
    <filename>dir_dc0db46fed651021cb5c799d3bdf00d7.html</filename>
    <file>SpaldingLawOfTheWall.C</file>
    <file>SpaldingLawOfTheWall.H</file>
  </compound>
  <compound kind="dir">
    <name>tests</name>
    <path>/home/tiam/OpenFOAM/tiam-3.0.1/applications/libWallModelledLES/tests/</path>
    <filename>dir_588bec7ca7c8ccdb4e47682fb68f93c2.html</filename>
    <dir>rootFinding</dir>
  </compound>
  <compound kind="dir">
    <name>tiam</name>
    <path>/home/tiam/</path>
    <filename>dir_a0e2b4f59508e41f70bf05a0ac19d40a.html</filename>
    <dir>OpenFOAM</dir>
  </compound>
  <compound kind="dir">
    <name>tiam-3.0.1</name>
    <path>/home/tiam/OpenFOAM/tiam-3.0.1/</path>
    <filename>dir_4a61e1e409f4f72abbdd29b903645ddf.html</filename>
    <dir>applications</dir>
  </compound>
  <compound kind="dir">
    <name>wallModels</name>
    <path>/home/tiam/OpenFOAM/tiam-3.0.1/applications/libWallModelledLES/wallModels/</path>
    <filename>dir_9ceebd6984345914875d50f6063a302f.html</filename>
    <file>EquilibriumODEWallModelFvPatchScalarField.C</file>
    <file>EquilibriumODEWallModelFvPatchScalarField.H</file>
    <file>LOTWWallModelFvPatchScalarField.C</file>
    <file>LOTWWallModelFvPatchScalarField.H</file>
    <file>ODEWallModelFvPatchScalarField.C</file>
    <file>ODEWallModelFvPatchScalarField.H</file>
    <file>wallModelFvPatchScalarField.C</file>
    <file>wallModelFvPatchScalarField.H</file>
  </compound>
  <compound kind="dir">
    <name>WernerWengleLawOfTheWall</name>
    <path>/home/tiam/OpenFOAM/tiam-3.0.1/applications/libWallModelledLES/lawsOfTheWall/WernerWengleLawOfTheWall/</path>
    <filename>dir_a08d50124db5d9d5a5ed83221f81f653.html</filename>
    <file>WernerWengleLawOfTheWall.C</file>
    <file>WernerWengleLawOfTheWall.H</file>
  </compound>
</tagfile>
